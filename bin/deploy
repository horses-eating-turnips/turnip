#!/bin/bash

##
# @file
# OpenSourcery Drupal deployment script
#
# This file should not generally be edited. Configurations are
# specified per-environment, in the various .config files in the `bin`
# directory. For instance, `.config.dev`, `.config.production`.
#

##
# Show help.
#
show_help() {
  # Get a list of environments, comma separated.
  conffiles=( bin/.config.*)
  environments=$(printf ", %s" "${conffiles[@]#bin/.config.}")
  environments=${environments:1}

cat <<EOF
  Usage: $0 [options]
  Deploys $PROJECTNAME. The following environment variables must be available:

    \$HOST          The hostname that will be connected to via SSH
    \$USER          The username for the SSH connection
    \$PORT          The SSH port
    \$INSTALLROOT   The root turnip installation directory on \$HOST
    \$DIRECTORY     The drupal installation directory in the local repository

  The normal way to provide these variables is to source the relevant
  environment config file before executing $0. The environments currently with
  available configurations are:

    $environments

  Options:
    --help/-h       Show this help text
    --init/-i       Initializes a .config.ENVIRONMENT file
EOF
}

##
# Ensures and/or creates deployment structure.
#
ensure_directories() {
  ssh $USER@$HOST -p $PORT "ls $INSTALLROOT/shared > /dev/null 2>&1" || ssh $USER@$HOST "mkdir $INSTALLROOT/shared"
  ssh $USER@$HOST -p $PORT "ls $INSTALLROOT/releases > /dev/null 2>&1" || ssh $USER@$HOST "mkdir $INSTALLROOT/releases"
}

# Load project-wide config.
if [ ! -e bin/.config ]; then
  echo "Error: could not find configuration file. Please use `drush turnip-init` to install."
  exit 2
fi
source bin/.config

# Parse the arguments.
init=0
for i in "$@"; do
  case $i in
    "--help"|"-h")
    show_help >&2
    exit 1
    ;;
    "--init"|"-i")
    init=1
    ;;
    *)
    echo "Unknown option \"$1\"!"
    echo "Try '$0 --help' for more information."
    exit 2
    ;;
  esac
done

# Initializes config file.
if [[ $init -eq 1 ]]; then
  read -p "Provide a name for this environment: " environment
  if [[ -f bin/.config.$environment ]]; then
    echo "ERROR: The environment \"$environment\" already exists."
    return 3;
  fi
  echo "Do you have server parameters (e.g., host and user account)?"
  select yn in "Yes" "No"; do
    case $yn in
      Yes )
      read -p "What is the SSH hostname? " HOSTNAME
      read -p "What is the SSH username? " USERNAME
      read -p "What is the SSH port? " PORT
      read -p "What is the installation directory on the server? " INSTALLROOT
      echo "export HOST=\"$HOST\"" > bin/.config.$environment
      echo "export USER=\"$USER\"" >> bin/.config.$environment
      echo "export PORT=\"$PORT\"" >> bin/.config.$environment
      echo "export INSTALLROOT=\"$INSTALLROOT\"" >> bin/.config.$environment
      echo "export DIRECTORY=\"./drupal\"" >> bin/.config.$environment
      echo "You can now edit bin/.config.$environment with any other changes"
      break;;
      No )
      echo "export HOST=\"\"" > bin/.config.$environment
      echo "export USER=\"\"" >> bin/.config.$environment
      echo "export PORT=\"\"" >> bin/.config.$environment
      echo "export INSTALLROOT=\"\"" >> bin/.config.$environment
      echo "export DIRECTORY=\"./drupal\"" >> bin/.config.$environment
      echo "You will need to edit bin/.config.$environment with the relevant information."
      break;;
    esac
  done

  # Add build variables for other environments. See `bin/build`.
  # TODO: These should probably be project-wide, rather than per-environment.
  if [[ "$environment" != "production" ]]; then
    echo "" >> bin/.config.$environment
    echo "# Default behavior: Don't touch the test host's database." >> bin/.config.$environment
    echo "# Two other (mutually exclusive) behaviors:" >> bin/.config.$environment
    echo "# - SITEINSTALL=1 # Run 'drush site-install'." >> bin/.config.$environment
    echo "# - RELOADDB=1    # Reload the latest production database." >> bin/.config.$environment
    echo "# Uncomment one, if applicable:" >> bin/.config.$environment
    echo "#SITEINSTALL=1" >> bin/.config.$environment
    echo "#RELOADDB=1" >> bin/.config.$environment
  fi

  exit 0
fi

# Load environment-specific configuration.
if [[ ! -e bin/.config.$environment ]]; then
  echo "Error: no configuration file found for the specified environment!"
  echo "Please edit 'bin/.config.$environment' accordingly:"
  echo "HOST=www.example.com"
  echo "INSTALLROOT=/var/www/example"
  echo ""
  echo "You can also run '$0 --init=$environment"
  exit 2
fi

if [[ -z $HOST ]]; then
  echo "No HOST is specified! Please ensure the \$HOST environment variable is set!"
  exit 2
fi
if [[ -z $USER ]]; then
  echo "No USER is specified! Please ensure the \$USER environment variable is set!"
  exit 2
fi
if [[ -z $PORT ]]; then
  echo "No PORT is specified! Please ensure the \$PORT environment variable is set!"
  exit 2
fi
if [[ -z $INSTALLROOT ]]; then
  echo "No INSTALLROOT is specified! Please ensure the \$INSTALLROOT environment variable is set!"
  exit 2
fi
if [[ -z $DIRECTORY ]]; then
  echo "No DIRECTORY is specified! Please ensure the \$INSTALLROOT environment variable is set!"
  exit 2
fi

# Ensure the install root exists.
ssh $USER@$HOST -p $PORT "ls $INSTALLROOT > /dev/null 2>&1"
if [[ $? -gt 0 ]]; then
  echo "The path $INSTALLROOT does not exist on $HOST!"
  exit 2
fi

# Ensure/initialize directory structure.
ensure_directories
if [[ $? -gt 0 ]]; then
  echo "Failed to ensure that the shared and releases directories are available at $HOST:$INSTALLROOT"
  exit 2
fi

if [ ! -d $DIRECTORY ]; then
  echo "ERROR: $DIRECTORY directory does not exist; nothing to deploy."
  exit 1
fi

# Deploy into a meaningfully named directory inside of the releases directory,
# but allow the environment to specify the timestamp if desired.
if [[ -z $TIMESTAMP ]]; then
  TIMESTAMP=`date +%Y-%m-%d.%H-%M-%S`.`git log -n 1 --format=%h`
fi

# If current exists, copy remote for faster rsync.
exists=`ssh $USER@$HOST -p $PORT "ls -l $INSTALLROOT/current > /dev/null 2>&1"`
if [[ $? -eq 0 ]]; then
  ssh $USER@$HOST -p $PORT "cp -Rp $INSTALLROOT/current/ $INSTALLROOT/releases/$TIMESTAMP"
fi

# Add -L to copy symlinks' referent files, so that we'll bring along our install profile
rsync -LazC -e "ssh -p $PORT" --exclude=sites/all/files --exclude=sites/default/files --exclude=sites/default/settings.local.php --exclude=backup --include=core --delete $DIRECTORY/ $USER@$HOST:$INSTALLROOT/releases/$TIMESTAMP/

# Create links to settings and files.
exists=`ssh $USER@$HOST -p $PORT "ls -l $INSTALLROOT/releases/$TIMESTAMP/sites/default/files" > /dev/null 2>&1`
if [[ $exists -gt 0 ]]; then
  ssh $USER@$HOST -p $PORT "ln -s $INSTALLROOT/shared/files $INSTALLROOT/releases/$TIMESTAMP/sites/default/files"
fi
exists=`ssh $USER@$HOST -p $PORT "ls -l $INSTALLROOT/releases/$TIMESTAMP/sites/default/settings.local.php" > /dev/null 2>&1`
if [[ $exists -gt 0 ]]; then
  ssh $USER@$HOST -p $PORT "ln -s $INSTALLROOT/shared/settings.local.php $INSTALLROOT/releases/$TIMESTAMP/sites/default/settings.local.php"
fi

# Remove old release link and link the new version.
exists=`ssh $USER@$HOST -p $PORT"ls -l $INSTALLROOT/current > /dev/null 2>&1"`
COMMAND="ln -s $INSTALLROOT/releases/$TIMESTAMP $INSTALLROOT/current"
if [[ $exists -gt 0 ]]; then
  COMMAND="rm $INSTALLROOT/current && $COMMAND"
fi
ssh $USER@$HOST -p $PORT "$COMMAND"

# Remove all but the last 4 builds in the releases directory.
DIRS=`ssh $USER@$HOST -p $PORT "ls -1r $INSTALLROOT/releases | tail -n +5"`
if [[ -n $DIRS ]]; then
  ssh $USER@$HOST -p $PORT "cd $INSTALLROOT/releases && rm -rf $DIRS"
fi

# Fix 7.x perms to sites/default directory.
ssh $USER@$HOST -p $PORT "chmod u+w $INSTALLROOT/releases/*/sites/default"

echo "Deployment complete"
